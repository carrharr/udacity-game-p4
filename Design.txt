DESIGN CHOICES

* What additional properties did you add to your models and why?

  The models are made out of the essentials for a two player game,
  or any game thats going to be online as this case. User and Game
  are absolutely necesary and score is probably an obvious choice
  as well for generating competition and interest in the game. While
  Score could be contained inside Games, the easiest and clearest
  approach for me was to have it as a separate model, with wich I
  could easily create leaderboards, or maybe use in the future for
  things like coupling users for games according to score. The
  properties, and methods in the models make it clearer to execute
  the api without lots of code that would obscure the general purpose
  of itself.


* What were some of the trade-offs or struggles you faced when
  implementing the new game logic?

  The new game logic lies heavily on the make_move endpoint, wich was
  quite complex to figure out as it consists on multiple checks on
  various parameters combined with execution of consequences of those
  parameters. Dealing with two players really made this part interesting
  as I nearly had to double everything, signifying who is who, and executing
  changes on models that meant the same, but for diferent users.
  Order of execution and sintax, also played part of the dificulty for me,
  as I missed variables in the process or arguments like message were not
  being passed in some cases, like "history". Overall the biggest struggle
  of all, was visualizing how data should flow and how the output should
  look.
